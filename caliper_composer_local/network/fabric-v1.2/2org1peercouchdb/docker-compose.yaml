version: '2'

services:
  ca.example.com:
    image: hyperledger/fabric-ca:1.2.0
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca.example.com
    ports:
      - "7054:7054"
    command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/key.pem -b admin:adminpw -d'
    volumes:
      - ../config/crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
    container_name: ca.example.com

  zookeeper0:
    image: hyperledger/fabric-zookeeper
    extends:
        service: zookeeper
    container_name: zookeeper0
    environment:
        - ZOO_MY_ID=1
        - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
    ports:
        - 2181
        - 2888
        - 3888
    networks:
      behave:
          aliases:
            - ${CORE_PEER_NETWORKID}

  zookeeper1:
    image: hyperledger/fabric-zookeeper
    extends:
        service: zookeeper
    container_name: zookeeper1
    environment:
        - ZOO_MY_ID=2
        - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
    ports:
        - 2181
        - 2888
        - 3888
    networks:
      behave:
          aliases:
            - ${CORE_PEER_NETWORKID}

  zookeeper2:
    image: hyperledger/fabric-zookeeper
    extends:
        service: zookeeper
    container_name: zookeeper2
    environment:
        - ZOO_MY_ID=3
        - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
    ports:
        - 2181
        - 2888
        - 3888
    networks:
      behave:
          aliases:
            - ${CORE_PEER_NETWORKID}

  kafka0:
    image: hyperledger/fabric-kafka
    extends:
        service: kafka
    container_name: kafka0
    environment:
        - KAFKA_BROKER_ID=0
        - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
        - KAFKA_MESSAGE_MAX_BYTES=${KAFKA_MESSAGE_MAX_BYTES}
        - KAFKA_REPLICA_FETCH_MAX_BYTES=${KAFKA_REPLICA_FETCH_MAX_BYTES}
        - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=${KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES}
        - KAFKA_LOG_RETENTION_MS=-1
        - KAFKA_MESSAGE_MAX_BYTES=103809024
        - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
        - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
        - KAFKA_DEFAULT_REPLICATION_FACTOR=${KAFKA_DEFAULT_REPLICATION_FACTOR}
        - KAFKA_MIN_INSYNC_REPLICAS=2
    depends_on:
        - zookeeper0
        - zookeeper1
        - zookeeper2
    ports:
        - 9092
    networks:
      behave:
          aliases:
            - ${CORE_PEER_NETWORKID}

  kafka1:
    image: hyperledger/fabric-kafka 
    extends:
        service: kafka
    container_name: kafka1
    environment:
        - KAFKA_BROKER_ID=1
        - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
        - KAFKA_MESSAGE_MAX_BYTES=${KAFKA_MESSAGE_MAX_BYTES}
        - KAFKA_REPLICA_FETCH_MAX_BYTES=${KAFKA_REPLICA_FETCH_MAX_BYTES}
        - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=${KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES}
        - KAFKA_LOG_RETENTION_MS=-1
        - KAFKA_MESSAGE_MAX_BYTES=103809024
        - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
        - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
        - KAFKA_DEFAULT_REPLICATION_FACTOR=${KAFKA_DEFAULT_REPLICATION_FACTOR}
        - KAFKA_MIN_INSYNC_REPLICAS=2
    depends_on:
        - zookeeper0
        - zookeeper1
        - zookeeper2
    ports:
          - 9092
    networks:
      behave:
          aliases:
            - ${CORE_PEER_NETWORKID}

  kafka2:
    image: hyperledger/fabric-kafka
    extends:
        service: kafka
    container_name: kafka2
    environment:
        - KAFKA_BROKER_ID=2
        - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
        - KAFKA_MESSAGE_MAX_BYTES=${KAFKA_MESSAGE_MAX_BYTES}
        - KAFKA_REPLICA_FETCH_MAX_BYTES=${KAFKA_REPLICA_FETCH_MAX_BYTES}
        - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=${KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES}
        - KAFKA_LOG_RETENTION_MS=-1
        - KAFKA_MESSAGE_MAX_BYTES=103809024
        - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
        - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
        - KAFKA_DEFAULT_REPLICATION_FACTOR=${KAFKA_DEFAULT_REPLICATION_FACTOR}
        - KAFKA_MIN_INSYNC_REPLICAS=2
    depends_on:
        - zookeeper0
        - zookeeper1
        - zookeeper2
    ports:
        - 9092
    networks:
      behave:
          aliases:
            - ${CORE_PEER_NETWORKID}

  kafka3:
    image: hyperledger/fabric-kafka
    extends:
        service: kafka
    container_name: kafka3
    environment:
        - KAFKA_BROKER_ID=3
        - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
        - KAFKA_MESSAGE_MAX_BYTES=${KAFKA_MESSAGE_MAX_BYTES}
        - KAFKA_REPLICA_FETCH_MAX_BYTES=${KAFKA_REPLICA_FETCH_MAX_BYTES}
        - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=${KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES}
        - KAFKA_LOG_RETENTION_MS=-1
        - KAFKA_MESSAGE_MAX_BYTES=103809024
        - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
        - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
        - KAFKA_DEFAULT_REPLICATION_FACTOR=${KAFKA_DEFAULT_REPLICATION_FACTOR}
        - KAFKA_MIN_INSYNC_REPLICAS=2
    depends_on:
        - zookeeper0
        - zookeeper1
        - zookeeper2
    ports:
        - 9092
    networks:
      behave:
          aliases:
            - ${CORE_PEER_NETWORKID}

  orderer0.example.com:
    image: hyperledger/fabric-orderer:1.2.0
    extends:
        service: orderer
    container_name: orderer0.example.com
    environment:
        - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${CORE_PEER_NETWORKID}_behave
        - ORDERER_HOME=/var/hyperledger/orderer
        - ORDERER_GENERAL_LOGLEVEL=debug
        - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/msp
        - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
        - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
        - ORDERER_GENERAL_LISTENPORT=7050
        - ORDERER_GENERAL_LEDGERTYPE=ram
        - ORDERER_GENERAL_GENESISMETHOD=file
        - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/configs/orderer.block
        - CONFIGTX_ORDERER_ORDERERTYPE=solo
        - CONFIGTX_ORDERER_BATCHSIZE_MAXMESSAGECOUNT=${CONFIGTX_ORDERER_BATCHSIZE_MAXMESSAGECOUNT}
        - CONFIGTX_ORDERER_BATCHTIMEOUT=${CONFIGTX_ORDERER_BATCHTIMEOUT}
        - CONFIGTX_ORDERER_ADDRESSES=[127.0.0.1:7050]
        # TLS settings
        - ORDERER_GENERAL_TLS_ENABLED=${ORDERER_GENERAL_TLS_ENABLED}
        - ORDERER_GENERAL_TLS_PRIVATEKEY=${ORDERER_GENERAL_TLS_PRIVATEKEY}
        - ORDERER_GENERAL_TLS_CERTIFICATE=${ORDERER_GENERAL_TLS_CERTIFICATE}
        - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/tls/ca.crt]
        - ORDERER_TLS_CLIENTAUTHREQUIRED=${ORDERER_TLS_CLIENTAUTHREQUIRED}
        - ORDERER_TLS_CLIENTROOTCAS_FILES=/var/hyperledger/users/Admin@example.com/tls/ca.crt
        - ORDERER_TLS_CLIENTCERT_FILE=/var/hyperledger/users/Admin@example.com/tls/client.crt
        - ORDERER_TLS_CLIENTKEY_FILE=/var/hyperledger/users/Admin@example.com/tls/client.key
        - ORDERER_HOST=orderer0.example.com
        - CONFIGTX_ORDERER_ORDERERTYPE=kafka
        - CONFIGTX_ORDERER_KAFKA_BROKERS=[kafka0:9092,kafka1:9092,kafka2:9092,kafka3:9092]
        - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
        - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
        - ORDERER_KAFKA_VERBOSE=true
        - ORDERER_GENERAL_GENESISPROFILE=SampleInsecureKafka
        - ORDERER_ABSOLUTEMAXBYTES=${ORDERER_ABSOLUTEMAXBYTES}
        - ORDERER_PREFERREDMAXBYTES=${ORDERER_PREFERREDMAXBYTES}

    volumes:
        - ../crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/msp:/var/hyperledger/msp
        - ../crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/tls:/var/hyperledger/tls
        - ../network-config/:/var/hyperledger/configs
        - ../network-config/:/var/hyperledger/configs
        - ../crypto-config/ordererOrganizations/example.com/users:/var/hyperledger/users
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
    command: orderer
    depends_on:
        - kafka0
        - kafka1
        - kafka2
        - kafka3
    networks:
      behave:
          aliases:
            - ${CORE_PEER_NETWORKID}
    ports:
      - '7050'
      - 7050:7050

  orderer1.example.com:
    image: hyperledger/fabric-orderer:1.2.0
    extends:
        service: orderer
    container_name: orderer1.example.com
    environment:
        - ORDERER_HOST=orderer1.example.com
        - CONFIGTX_ORDERER_ORDERERTYPE=kafka
        - CONFIGTX_ORDERER_KAFKA_BROKERS=[kafka0:9092,kafka1:9092,kafka2:9092,kafka3:9092]
        - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
        - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
        - ORDERER_KAFKA_RETRY_LONGINTERVAL=30s
        - ORDERER_KAFKA_RETRY_LONGTOTAL=5m
        - ORDERER_KAFKA_VERBOSE=true
        - ORDERER_GENERAL_GENESISPROFILE=SampleInsecureKafka
        - ORDERER_ABSOLUTEMAXBYTES=${ORDERER_ABSOLUTEMAXBYTES}
        - ORDERER_PREFERREDMAXBYTES=${ORDERER_PREFERREDMAXBYTES}
        - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${CORE_PEER_NETWORKID}_behave
        - ORDERER_HOME=/var/hyperledger/orderer
        - ORDERER_GENERAL_LOGLEVEL=debug
        - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/msp
        - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
        - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
        - ORDERER_GENERAL_LISTENPORT=7050
        - ORDERER_GENERAL_LEDGERTYPE=ram
        - ORDERER_GENERAL_GENESISMETHOD=file
        - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/configs/orderer.block
        - CONFIGTX_ORDERER_ORDERERTYPE=solo
        - CONFIGTX_ORDERER_BATCHSIZE_MAXMESSAGECOUNT=${CONFIGTX_ORDERER_BATCHSIZE_MAXMESSAGECOUNT}
        - CONFIGTX_ORDERER_BATCHTIMEOUT=${CONFIGTX_ORDERER_BATCHTIMEOUT}
        - CONFIGTX_ORDERER_ADDRESSES=[127.0.0.1:7050]
        # TLS settings
        - ORDERER_GENERAL_TLS_ENABLED=${ORDERER_GENERAL_TLS_ENABLED}
        - ORDERER_GENERAL_TLS_PRIVATEKEY=${ORDERER_GENERAL_TLS_PRIVATEKEY}
        - ORDERER_GENERAL_TLS_CERTIFICATE=${ORDERER_GENERAL_TLS_CERTIFICATE}
        - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/tls/ca.crt]
        - ORDERER_TLS_CLIENTAUTHREQUIRED=${ORDERER_TLS_CLIENTAUTHREQUIRED}
        - ORDERER_TLS_CLIENTROOTCAS_FILES=/var/hyperledger/users/Admin@example.com/tls/ca.crt
        - ORDERER_TLS_CLIENTCERT_FILE=/var/hyperledger/users/Admin@example.com/tls/client.crt
        - ORDERER_TLS_CLIENTKEY_FILE=/var/hyperledger/users/Admin@example.com/tls/client.key
    volumes:
        - ../crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/msp:/var/hyperledger/msp
        - ../crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls:/var/hyperledger/tls
        - ../network-config/:/var/hyperledger/configs
        - ../network-config/:/var/hyperledger/configs
        - ../crypto-config/ordererOrganizations/example.com/users:/var/hyperledger/users
    depends_on:
        - kafka0
        - kafka1
        - kafka2
        - kafka3
    networks:
      behave:
          aliases:
            - ${CORE_PEER_NETWORKID}
    ports:
      - '7050'
      - 8050:7050

  orderer2.example.com:
    image: hyperledger/fabric-orderer:1.2.0
    extends:
        service: orderer
    container_name: orderer2.example.com
    environment:
        - ORDERER_HOST=orderer2.example.com
        - CONFIGTX_ORDERER_ORDERERTYPE=kafka
        - CONFIGTX_ORDERER_KAFKA_BROKERS=[kafka0:9092,kafka1:9092,kafka2:9092,kafka3:9092]
        - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
        - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
        - ORDERER_KAFKA_VERBOSE=true
        - ORDERER_GENERAL_GENESISPROFILE=SampleInsecureKafka
        - ORDERER_ABSOLUTEMAXBYTES=${ORDERER_ABSOLUTEMAXBYTES}
        - ORDERER_PREFERREDMAXBYTES=${ORDERER_PREFERREDMAXBYTES}
        - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${CORE_PEER_NETWORKID}_behave
        - ORDERER_HOME=/var/hyperledger/orderer
        - ORDERER_GENERAL_LOGLEVEL=debug
        - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/msp
        - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
        - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
        - ORDERER_GENERAL_LISTENPORT=7050
        - ORDERER_GENERAL_LEDGERTYPE=ram
        - ORDERER_GENERAL_GENESISMETHOD=file
        - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/configs/orderer.block
        - CONFIGTX_ORDERER_ORDERERTYPE=solo
        - CONFIGTX_ORDERER_BATCHSIZE_MAXMESSAGECOUNT=${CONFIGTX_ORDERER_BATCHSIZE_MAXMESSAGECOUNT}
        - CONFIGTX_ORDERER_BATCHTIMEOUT=${CONFIGTX_ORDERER_BATCHTIMEOUT}
        - CONFIGTX_ORDERER_ADDRESSES=[127.0.0.1:7050]
        # TLS settings
        - ORDERER_GENERAL_TLS_ENABLED=${ORDERER_GENERAL_TLS_ENABLED}
        - ORDERER_GENERAL_TLS_PRIVATEKEY=${ORDERER_GENERAL_TLS_PRIVATEKEY}
        - ORDERER_GENERAL_TLS_CERTIFICATE=${ORDERER_GENERAL_TLS_CERTIFICATE}
        - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/tls/ca.crt]
        - ORDERER_TLS_CLIENTAUTHREQUIRED=${ORDERER_TLS_CLIENTAUTHREQUIRED}
        - ORDERER_TLS_CLIENTROOTCAS_FILES=/var/hyperledger/users/Admin@example.com/tls/ca.crt
        - ORDERER_TLS_CLIENTCERT_FILE=/var/hyperledger/users/Admin@example.com/tls/client.crt
        - ORDERER_TLS_CLIENTKEY_FILE=/var/hyperledger/users/Admin@example.com/tls/client.key
    volumes:
        - ../crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/msp:/var/hyperledger/msp
        - ../crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls:/var/hyperledger/tls
        - ../network-config/:/var/hyperledger/configs
        - ../network-config/:/var/hyperledger/configs
        - ../crypto-config/ordererOrganizations/example.com/users:/var/hyperledger/users
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
        - kafka0
        - kafka1
        - kafka2
        - kafka3
    networks:
      behave:
          aliases:
            - ${CORE_PEER_NETWORKID}
    ports:
      - '7050'
      - 9050:7050

  peer0.org1.example.com:
    container_name: peer0.org1.example.com
    image: hyperledger/fabric-peer:1.2.0
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_NETWORKID=${CORE_PEER_NETWORKID}
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${CORE_PEER_NETWORKID}_behave
      - CORE_PEER_ADDRESSAUTODETECT=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_MSPCONFIGPATH=/var/hyperledger/msp
      #- CORE_LEDGER_STATE_STATEDATABASE=LevelDB
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_LOGGING_GOSSIP=${CORE_LOGGING_GOSSIP}
      - CORE_LOGGING_MSP=DEBUG
      # TLS settings
      - CORE_PEER_TLS_ENABLED=${CORE_PEER_TLS_ENABLED}
      - CORE_PEER_TLS_CLIENTAUTHREQUIRED=${CORE_PEER_TLS_CLIENTAUTHREQUIRED}
      - CORE_PEER_TLS_CERT_FILE=${CORE_PEER_TLS_CERT_FILE}
      - CORE_PEER_TLS_KEY_FILE=${CORE_PEER_TLS_KEY_FILE}
      - CORE_PEER_TLS_ROOTCERT_FILE=/var/hyperledger/tls/ca.crt
      - CORE_PEER_CHAINCODELISTENADDRESS=peer0.org1.example.com:7052
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_ORGLEADER=${CORE_PEER_GOSSIP_ORGLEADER_PEER0_ORG1}
      - CORE_PEER_GOSSIP_USELEADERELECTION=${CORE_PEER_GOSSIP_USELEADERELECTION_PEER0_ORG1}
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_CLIENTROOTCAS_FILES=/var/hyperledger/users/Admin@org1.example.com/tls/ca.crt
      - CORE_PEER_TLS_CLIENTCERT_FILE=/var/hyperledger/users/Admin@org1.example.com/tls/client.crt
      - CORE_PEER_TLS_CLIENTKEY_FILE=/var/hyperledger/users/Admin@org1.example.com/tls/client.key
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    volumes:
      - /var/run/:/host/var/run/
      - ../config/mychannel.tx:/etc/hyperledger/configtx/mychannel.tx
      - ../config/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/peer/msp
      - ../config/crypto-config/peerOrganizations/org1.example.com/users:/etc/hyperledger/msp/users
      - /var/run/:/host/var/run/
      - $GOPATH/src/github.com/hyperledger/fabric/:/opt/gopath/src/github.com/hyperledger/fabric/
      - ../crypto-config/:/var/hyperledger/configs
      - ../network-config/:/var/hyperledger/configs
    networks:
      behave:
         aliases:
           - ${CORE_PEER_NETWORKID}
    depends_on:
      - orderer.example.com
      - couchdb.org1.example.com
    ports:
      - '7051'
      - '7053'
      - 7051:7051
      - 7053:7053
    
  peer1.org1.example.com:
    container_name: peer1.org1.example.com
    image: hyperledger/fabric-peer:1.2.0
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_NETWORKID=${CORE_PEER_NETWORKID}
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${CORE_PEER_NETWORKID}_behave
      - CORE_PEER_ADDRESSAUTODETECT=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_MSPCONFIGPATH=/var/hyperledger/msp
      #- CORE_LEDGER_STATE_STATEDATABASE=LevelDB
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_LOGGING_GOSSIP=${CORE_LOGGING_GOSSIP}
      - CORE_LOGGING_MSP=DEBUG
      # TLS settings
      - CORE_PEER_TLS_ENABLED=${CORE_PEER_TLS_ENABLED}
      - CORE_PEER_TLS_CLIENTAUTHREQUIRED=${CORE_PEER_TLS_CLIENTAUTHREQUIRED}
      - CORE_PEER_TLS_CERT_FILE=${CORE_PEER_TLS_CERT_FILE}
      - CORE_PEER_TLS_KEY_FILE=${CORE_PEER_TLS_KEY_FILE}
      - CORE_PEER_TLS_ROOTCERT_FILE=/var/hyperledger/tls/ca.crt
      - CORE_PEER_CHAINCODELISTENADDRESS=peer1.org1.example.com:7052
      - CORE_PEER_ID=peer1.org1.example.com
      - CORE_PEER_ADDRESS=peer1.org1.example.com:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_ORGLEADER=${CORE_PEER_GOSSIP_ORGLEADER_PEER1_ORG1}
      - CORE_PEER_GOSSIP_USELEADERELECTION=${CORE_PEER_GOSSIP_USELEADERELECTION_PEER1_ORG1}
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_CLIENTROOTCAS_FILES=/var/hyperledger/users/Admin@org1.example.com/tls/ca.crt
      - CORE_PEER_TLS_CLIENTCERT_FILE=/var/hyperledger/users/Admin@org1.example.com/tls/client.crt
      - CORE_PEER_TLS_CLIENTKEY_FILE=/var/hyperledger/users/Admin@org1.example.com/tls/client.key
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    volumes:
      - /var/run/:/host/var/run/
      - ../config/mychannel.tx:/etc/hyperledger/configtx/mychannel.tx
      - ../config/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/peer/msp
      - ../config/crypto-config/peerOrganizations/org1.example.com/users:/etc/hyperledger/msp/users
      - /var/run/:/host/var/run/
      - $GOPATH/src/github.com/hyperledger/fabric/:/opt/gopath/src/github.com/hyperledger/fabric/
      - ../crypto-config/:/var/hyperledger/configs
      - ../network-config/:/var/hyperledger/configs
    networks:
      behave:
         aliases:
           - ${CORE_PEER_NETWORKID}
    depends_on:
      - orderer.example.com
      - couchdb.org1.example.com
    ports:
      - '7051'
      - '7053'
      - 8051:7051
      - 8053:7053


  peer2.org1.example.com:
    container_name: peer2.org1.example.com
    image: hyperledger/fabric-peer:1.2.0
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_NETWORKID=${CORE_PEER_NETWORKID}
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${CORE_PEER_NETWORKID}_behave
      - CORE_PEER_ADDRESSAUTODETECT=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_MSPCONFIGPATH=/var/hyperledger/msp
      #- CORE_LEDGER_STATE_STATEDATABASE=LevelDB
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_LOGGING_GOSSIP=${CORE_LOGGING_GOSSIP}
      - CORE_LOGGING_MSP=DEBUG
      # TLS settings
      - CORE_PEER_TLS_ENABLED=${CORE_PEER_TLS_ENABLED}
      - CORE_PEER_TLS_CLIENTAUTHREQUIRED=${CORE_PEER_TLS_CLIENTAUTHREQUIRED}
      - CORE_PEER_TLS_CERT_FILE=${CORE_PEER_TLS_CERT_FILE}
      - CORE_PEER_TLS_KEY_FILE=${CORE_PEER_TLS_KEY_FILE}
      - CORE_PEER_TLS_ROOTCERT_FILE=/var/hyperledger/tls/ca.crt
      - CORE_PEER_CHAINCODELISTENADDRESS=peer2.org1.example.com:7052
      - CORE_PEER_ID=peer2.org1.example.com
      - CORE_PEER_ADDRESS=peer2.org1.example.com:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_ORGLEADER=${CORE_PEER_GOSSIP_ORGLEADER_PEER2_ORG1}
      - CORE_PEER_GOSSIP_USELEADERELECTION=${CORE_PEER_GOSSIP_USELEADERELECTION_PEER2_ORG1}
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_CLIENTROOTCAS_FILES=/var/hyperledger/users/Admin@org1.example.com/tls/ca.crt
      - CORE_PEER_TLS_CLIENTCERT_FILE=/var/hyperledger/users/Admin@org1.example.com/tls/client.crt
      - CORE_PEER_TLS_CLIENTKEY_FILE=/var/hyperledger/users/Admin@org1.example.com/tls/client.key
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    volumes:
      - /var/run/:/host/var/run/
      - ../config/mychannel.tx:/etc/hyperledger/configtx/mychannel.tx
      - ../config/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/peer/msp
      - ../config/crypto-config/peerOrganizations/org1.example.com/users:/etc/hyperledger/msp/users
      - /var/run/:/host/var/run/
      - $GOPATH/src/github.com/hyperledger/fabric/:/opt/gopath/src/github.com/hyperledger/fabric/
      - ../crypto-config/:/var/hyperledger/configs
      - ../network-config/:/var/hyperledger/configs
    networks:
      behave:
         aliases:
           - ${CORE_PEER_NETWORKID}
    depends_on:
      - orderer.example.com
      - couchdb.org1.example.com
    ports:
      - '9051'
      - '9053'
      - 9051:7051
      - 9053:7053

  couchdb01:
    image: hyperledger/fabric-couchdb:1.2.0
    extends:
        service: couchdb
    container_name: couchdb01
    # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
    # for example map it to utilize Fauxton User Interface in dev environments.
    ports:
      - "5984:5984"
    networks:
      behave:
          aliases:
            - ${CORE_PEER_NETWORKID}

    peer0.org1.example.com:
      environment:
          - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
          - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb01:5984
      depends_on:
          - orderer0.example.com
          - couchdb01

    couchdb02:
      extends:
          file: docker-compose-base.yml
          service: couchdb
      container_name: couchdb02
      # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
      # for example map it to utilize Fauxton User Interface in dev environments.
      ports:
        - "6984:5984"
      networks:
        behave:
            aliases:
              - ${CORE_PEER_NETWORKID}

    peer1.org1.example.com:
        environment:
            - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
            - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb02:5984
        depends_on:
            - orderer0.example.com
            - couchdb02

    couchdb11:
      extends:
          file: docker-compose-base.yml
          service: couchdb
      container_name: couchdb11
      # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
      # for example map it to utilize Fauxton User Interface in dev environments.
      ports:
        - "7984:5984"
      networks:
        behave:
            aliases:
              - ${CORE_PEER_NETWORKID}

    peer2.org1.example.com:
        environment:
            - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
            - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb11:5984
        depends_on:
            - orderer0.example.com
            - couchdb11


